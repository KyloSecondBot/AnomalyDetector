import React, { useState, useEffect } from "react";
import axios from "axios";
import { FaFilePdf, FaFileAlt, FaCheckCircle, FaTimesCircle } from "react-icons/fa";
import CircularProgress from "@mui/material/CircularProgress";
import "./malwarechecker.css";

export default function MalwareChecker({ sidebarOpen }) {
    const [mode, setMode] = useState("file");
    const [file, setFile] = useState(null);
    const [url, setUrl] = useState("");
    const [result, setResult] = useState(null);
    const [loading, setLoading] = useState(false);

    useEffect(() => {
        const root = document.documentElement;
        root.style.setProperty("--sidebar-width", sidebarOpen ? "250px" : "0px");
    }, [sidebarOpen]);

    const handleFileChange = (e) => {
        const uploadedFile = e.target.files[0];
        if (uploadedFile) setFile(uploadedFile);
    };

    const handleFileUpload = async () => {
        if (!file) return alert("Please select a file to upload!");

        const formData = new FormData();
        formData.append("file", file);
        setLoading(true);
        setResult(null);

        try {
            const response = await axios.post("http://localhost:3011/api/analyze/file", formData, {
                headers: { "Content-Type": "multipart/form-data" },
            });
            setResult(response.data.result);
        } catch (error) {
            const errorMessage =
                error.response?.data?.error || "An error occurred while processing your file.";
            setResult({ error: errorMessage });
        } finally {
            setLoading(false);
        }
    };

    const handleUrlSubmit = async () => {
        if (!url.trim()) return alert("Please enter a valid URL!");

        setLoading(true);
        setResult(null);

        try {
            const response = await axios.post("http://localhost:3011/api/analyze/url", { url });
            setResult(response.data.result);
        } catch (error) {
            const errorMessage =
                error.response?.data?.error || "An error occurred while processing the URL.";
            setResult({ error: errorMessage });
        } finally {
            setLoading(false);
        }
    };

    const resetFile = () => {
        setFile(null);
        setResult(null);
    };

    return (
        <div className="malware-checker-container">
            <h1 className="title">Malware Checker</h1>
            <div className="content-switcher">
                <button
                    className={mode === "file" ? "active" : ""}
                    onClick={() => setMode("file")}
                >
                    File Upload
                </button>
                <button
                    className={mode === "url" ? "active" : ""}
                    onClick={() => setMode("url")}
                >
                    URL Submission
                </button>
            </div>

            {loading && (
                <div className="loading-overlay">
                    <CircularProgress size={80} thickness={5} color="primary" />
                </div>
            )}

            {!loading && (
                <div className="checker-content">
                    {mode === "file" && (
                        <div className="file-upload">
                            {!file ? (
                                <div>
                                    <label htmlFor="file-upload" className="custom-file-upload">
                                        Upload File
                                    </label>
                                    <input
                                        id="file-upload"
                                        type="file"
                                        accept=".pdf,.doc,.docx,.txt"
                                        onChange={handleFileChange}
                                    />
                                </div>
                            ) : (
                                <div className="file-preview">
                                    <div className="file-info">
                                        <div className="file-icon">
                                            {file.type === "application/pdf" ? <FaFilePdf /> : <FaFileAlt />}
                                        </div>
                                        <div className="file-name">
                                            <p>{file.name}</p>
                                        </div>
                                    </div>
                                    <div className="file-details">
                                        <button onClick={handleFileUpload}>Analyze</button>
                                        <button onClick={resetFile} className="remove-file">
                                            Remove
                                        </button>
                                    </div>
                                </div>
                            )}
                        </div>
                    )}
                    {mode === "url" && (
                        <div className="url-submission">
                            <input
                                type="text"
                                placeholder="Enter URL to analyze"
                                value={url}
                                onChange={(e) => setUrl(e.target.value)}
                            />
                            <button onClick={handleUrlSubmit}>Submit URL</button>
                        </div>
                    )}
                </div>
            )}

            {result && (
                <div className="result-section">
                    <h2>Analysis Result</h2>
                    {result.error ? (
                        <div className="error-result">
                            <FaTimesCircle className="error-icon" />
                            <p>{result.error}</p>
                        </div>
                    ) : (
                        <div className={`result-card ${result.prediction === "malicious" ? "malicious" : "benign"}`}>
                            <div className="result-icon">
                                {result.prediction === "malicious" ? <FaTimesCircle /> : <FaCheckCircle />}
                            </div>
                            <p className="result-prediction">Prediction: {result.prediction.toUpperCase()}</p>
                            <p className="result-confidence">Confidence: {parseFloat(result.confidence).toFixed(2)}%</p>
                        </div>
                    )}
                </div>
            )}
        </div>
    );
}
