{"ast":null,"code":"var _jsxFileName = \"/Users/timothygilbert/Documents/React JS/anomaly-detector/client/src/pages/SQLAnalysisPage/Sqllog.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Sqllog.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Sqllog() {\n  _s();\n  const [logs, setLogs] = useState([]);\n  const [todayAttacks, setTodayAttacks] = useState(0);\n  const [loading, setLoading] = useState(true);\n\n  // Fetch logs from the backend\n  useEffect(() => {\n    const fetchLogs = async () => {\n      try {\n        var _response$data, _response$data2;\n        const response = await axios.get('http://localhost:3011/api/malicious-logs');\n        const logsData = ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.maliciousQueries) || [];\n        const attacksToday = ((_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.todayAttacks) || 0;\n        setLogs(logsData);\n        setTodayAttacks(attacksToday);\n      } catch (error) {\n        console.error('Error fetching logs:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchLogs();\n  }, []);\n\n  // Format the date\n  const formatDate = isoDate => {\n    const date = new Date(isoDate);\n    return date.toLocaleString(); // Converts to local time and human-readable format\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sql-log-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"SQL Malicious Query Log\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading logs...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"title\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Malicious Queries Today:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 24\n        }, this), \" \", todayAttacks]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Total Malicious Queries:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 24\n        }, this), \" \", logs.length || 0]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 21\n      }, this), logs.length > 0 ? /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"sql-log-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"No\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Query\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: logs.map((log, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: index + 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: log.query\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: formatDate(log.date)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 41\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 37\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No malicious queries logged yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n}\n_s(Sqllog, \"428K9t2Exz4wOhFCgkQ9Tg8octk=\");\n_c = Sqllog;\nvar _c;\n$RefreshReg$(_c, \"Sqllog\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Sqllog","_s","logs","setLogs","todayAttacks","setTodayAttacks","loading","setLoading","fetchLogs","_response$data","_response$data2","response","get","logsData","data","maliciousQueries","attacksToday","error","console","formatDate","isoDate","date","Date","toLocaleString","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","log","index","query","_c","$RefreshReg$"],"sources":["/Users/timothygilbert/Documents/React JS/anomaly-detector/client/src/pages/SQLAnalysisPage/Sqllog.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Sqllog.css';\n\nexport default function Sqllog() {\n    const [logs, setLogs] = useState([]);\n    const [todayAttacks, setTodayAttacks] = useState(0);\n    const [loading, setLoading] = useState(true);\n\n    // Fetch logs from the backend\n    useEffect(() => {\n        const fetchLogs = async () => {\n            try {\n                const response = await axios.get('http://localhost:3011/api/malicious-logs');\n                const logsData = response.data?.maliciousQueries || [];\n                const attacksToday = response.data?.todayAttacks || 0;\n\n                setLogs(logsData);\n                setTodayAttacks(attacksToday);\n            } catch (error) {\n                console.error('Error fetching logs:', error);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchLogs();\n    }, []);\n\n    // Format the date\n    const formatDate = (isoDate) => {\n        const date = new Date(isoDate);\n        return date.toLocaleString(); // Converts to local time and human-readable format\n    };\n\n    return (\n        <div className=\"sql-log-container\">\n            <h1>SQL Malicious Query Log</h1>\n            {loading ? (\n                <p>Loading logs...</p>\n            ) : (\n                <div className='title'>\n                    <p><strong>Malicious Queries Today:</strong> {todayAttacks}</p>\n                    <p><strong>Total Malicious Queries:</strong> {logs.length || 0}</p>\n\n                    {logs.length > 0 ? (\n                        <table className=\"sql-log-table\">\n                            <thead>\n                                <tr>\n                                    <th>No</th>\n                                    <th>Query</th>\n                                    <th>Date</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {logs.map((log, index) => (\n                                    <tr key={index}>\n                                        <td>{index + 1}</td>\n                                        <td>{log.query}</td>\n                                        <td>{formatDate(log.date)}</td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </table>\n                    ) : (\n                        <p>No malicious queries logged yet.</p>\n                    )}\n                </div>\n            )}\n        </div>\n    );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}